{"version":3,"sources":["Сomponents/FormComment/FormComment.jsx","Сomponents/Pagination/Pagination.jsx","Сomponents/ListComments/ListComments.jsx","App.js","reportWebVitals.js","index.js"],"names":["validationSchema","yup","name","required","text","FormComments","initialValues","onSubmit","values","a","resetForm","fetch","method","body","JSON","stringify","headers","then","response","json","post","console","log","catch","error","handleChange","handleSubmit","className","TextField","onChange","placeholder","value","TextareaAutosize","style","outline","border","padding","borderRadius","fontFamily","Button","type","variant","color","fontSize","Pagination","commentsPerPage","totalComments","paginate","pageNumbers","i","Math","ceil","push","map","number","onClick","ListComments","useState","comment","setComment","currentPage","setCurrentPage","useEffect","pageSize","axios","get","data","fetchComments","indexOfLastComment","indexOfTheFirstComment","currentComments","slice","date","created_at","id","Date","toLocaleString","weekday","year","month","day","prevPage","margin","display","length","pageNumber","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dca1a8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport { TextField, Button, TextareaAutosize } from '@material-ui/core';\r\nimport * as yup from 'yup';\r\nimport ArrowForwardIosSharpIcon from '@material-ui/icons/ArrowForwardIosSharp';\r\n\r\nconst validationSchema = yup.object({\r\n  name: yup.string().required('Заполните все поля'),\r\n  text: yup.string().required('Заполните все поля'),\r\n});\r\n\r\nexport default function FormComments() {\r\n  return (\r\n    <div>\r\n      <h1>Ваш комментарий</h1>\r\n      <Formik\r\n        validationSchema={validationSchema}\r\n        initialValues={{\r\n          name: '',\r\n          text: '',\r\n        }}\r\n        onSubmit={async (values, { resetForm }) => {\r\n          fetch('https://jordan.ashton.fashion/api/goods/30/comments', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values, null, 2),\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          })\r\n            .then(response => response.json())\r\n            .then(post => console.log(post))\r\n            .catch(error => console.log(error));\r\n          resetForm();\r\n        }}\r\n      >\r\n        {({ values, handleChange, handleSubmit }) => (\r\n          <Form onSubmit={handleSubmit} className='formCommentsWrapper'>\r\n            <TextField\r\n              onChange={handleChange}\r\n              name='name'\r\n              placeholder='Имя'\r\n              value={values.name}\r\n            />\r\n\r\n            <TextareaAutosize\r\n              aria-label='empty textarea'\r\n              onChange={handleChange}\r\n              name='text'\r\n              placeholder='Комментарий'\r\n              value={values.text}\r\n              style={{\r\n                outline: 'none',\r\n                border: '1px rgba(245, 0, 87, 0.5) solid',\r\n                padding: 10,\r\n                borderRadius: 4,\r\n                fontFamily: 'Lato',\r\n                '&::placeholder': {\r\n                  fontFamily: 'Lato',\r\n                },\r\n              }}\r\n            />\r\n\r\n            <Button type='submit' variant='outlined' color='secondary'>\r\n              отправить <ArrowForwardIosSharpIcon style={{ fontSize: 15 }} />\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}","import { Button } from '@material-ui/core';\r\n\r\nexport default function Pagination({\r\n  commentsPerPage,\r\n  totalComments,\r\n  paginate,\r\n}) {\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(totalComments / commentsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return (\r\n    <ul className='paginationWrapper'>\r\n      {pageNumbers.map(number => (\r\n        <li key={number}>\r\n          <Button\r\n            color='primary'\r\n            variant='outlined'\r\n            onClick={() => paginate(number)}\r\n          >\r\n            {number}\r\n          </Button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport Pagination from '../Pagination';\r\n\r\nfunction dateformat(date) {\r\n  const data = new Date(date);\r\n  let options = {\r\n    weekday: 'long',\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  };\r\n  return data.toLocaleString('ru', options);\r\n}\r\n\r\nconst fetchComments = ({ currentPage = 1, pageSize = 5 } = {}) => {\r\n  return axios\r\n    .get(\r\n      `https://jordan.ashton.fashion/api/goods/30/comments?per_page=${pageSize}?page=${currentPage}`\r\n    )\r\n    .then(response => response.data.data);\r\n};\r\n\r\nexport default function ListComments() {\r\n  const [comment, setComment] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [commentsPerPage] = useState(5);\r\n\r\n  useEffect(() => {\r\n    const getComments = () => {\r\n      fetchComments({ currentPage })\r\n        .then(response => {\r\n          setComment(response);\r\n        })\r\n        .catch(console.log());\r\n    };\r\n    getComments();\r\n  }, [currentPage]);\r\n\r\n  const indexOfLastComment = currentPage * commentsPerPage;\r\n  const indexOfTheFirstComment = indexOfLastComment - commentsPerPage;\r\n  const currentComments = comment.slice(\r\n    indexOfTheFirstComment,\r\n    indexOfLastComment\r\n  );\r\n  console.log(currentComments);\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  const updatePage = () => {\r\n    setCurrentPage(prevPage => prevPage + 1);\r\n  };\r\n\r\n  return (\r\n    <div className='CommentsWrapper'>\r\n      <h1>Comments</h1>\r\n\r\n      <ul>\r\n        {currentComments &&\r\n          currentComments.map(({ name, text, created_at, id }) => (\r\n            <li key={id}>\r\n              <h2 className='name'>{name}</h2>\r\n              <p className='message'>{text}</p>\r\n              <p className='data'>{dateformat(created_at)}</p>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      <Button\r\n        onClick={updatePage}\r\n        variant='contained'\r\n        color='secondary'\r\n        style={{ margin: '60px auto 10px auto', display: 'block' }}\r\n      >\r\n        load more\r\n      </Button>\r\n      <Pagination\r\n        commentsPerPage={commentsPerPage}\r\n        totalComments={comment.length}\r\n        paginate={paginate}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import FormComment from './Сomponents/FormComment';\nimport ListComments from './Сomponents/ListComments';\n\nfunction App() {\n  return (\n    <main>\n      <FormComment />\n      <ListComments />\n    </main>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}