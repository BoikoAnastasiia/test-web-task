{"version":3,"sources":["Сomponents/FormComment/FormComment.jsx","Сomponents/ListComments/ListComments.jsx","App.js","reportWebVitals.js","index.js"],"names":["validationSchema","yup","name","required","comment","FormComments","initialValues","onSubmit","values","a","resetForm","fetch","method","body","JSON","stringify","headers","then","response","json","post","console","log","catch","error","handleChange","handleSubmit","className","TextField","onChange","placeholder","value","TextareaAutosize","style","outline","border","padding","borderRadius","fontFamily","Button","type","variant","color","fontSize","ListComments","useState","setComment","page","setPage","useEffect","res","data","onClick","margin","display","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAMMA,EAAmBC,IAAW,CAClCC,KAAMD,MAAaE,SAAS,sGAC5BC,QAASH,MAAaE,SAAS,wGAGlB,SAASE,IACtB,OACE,gCACE,uHACA,cAAC,IAAD,CACEL,iBAAkBA,EAClBM,cAAe,CACbJ,KAAM,GACNE,QAAS,IAEXG,SAAQ,uCAAE,WAAOC,EAAP,kBAAAC,EAAA,sDAAiBC,EAAjB,EAAiBA,UACzBC,MAAM,sDAAuD,CAC3DC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,EAAQ,KAAM,GACnCQ,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIC,QAAQC,IAAIF,MACzBG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,MAC9Bd,IAXQ,2CAAF,wDANV,SAoBG,gBAAGF,EAAH,EAAGA,OAAQiB,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,aAAzB,OACC,eAAC,IAAD,CAAMnB,SAAUmB,EAAcC,UAAU,sBAAxC,UACE,cAACC,EAAA,EAAD,CACEC,SAAUJ,EACVvB,KAAK,OACL4B,YAAY,qBACZC,MAAOvB,EAAON,OAGhB,cAAC8B,EAAA,EAAD,CACE,aAAW,iBACXH,SAAUJ,EACVvB,KAAK,UACL4B,YAAY,qEACZC,MAAOvB,EAAOJ,QACd6B,MAAO,CACLC,QAAS,OACTC,OAAQ,kCACRC,QAAS,GACTC,aAAc,EACdC,WAAY,OACZ,iBAAkB,CAChBA,WAAY,WAKlB,eAACC,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,WAAWC,MAAM,YAA/C,oEACY,cAAC,IAAD,CAA0BT,MAAO,CAAEU,SAAU,kB,YC5DtD,SAASC,IACtB,MAA8BC,mBAAS,IAAvC,mBAAOzC,EAAP,KAAgB0C,EAAhB,KACA,EAAwBD,mBAAS,CAAC,IAAlC,mBAAOE,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACRtC,MAAM,4DAAD,OAA6DoC,IAC/D9B,MAAK,SAAAiC,GAAG,OAAIA,EAAI/B,UAChBF,MAAK,SAAAE,GAAI,OAAI2B,EAAW3B,QAC1B,CAAC4B,IAIJ,OACE,sBAAKpB,UAAU,kBAAf,UACE,oGAEA,oCAAOb,KAAKC,UAAUX,EAAQ+C,MAA9B,OACA,uBASA,cAACZ,EAAA,EAAD,CACEa,QAjBW,kBAAMJ,EAAQD,EAAO,IAkBhCN,QAAQ,YACRC,MAAM,YACNT,MAAO,CAAEoB,OAAQ,sBAAuBC,QAAS,SAJnD,0BCjBSC,MATf,WACE,OACE,iCACE,cAAC,EAAD,IACA,cAACX,EAAD,QCKSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fe0fe0d5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport { TextField, Button, TextareaAutosize } from '@material-ui/core';\r\nimport * as yup from 'yup';\r\nimport ArrowForwardIosSharpIcon from '@material-ui/icons/ArrowForwardIosSharp';\r\n\r\nconst validationSchema = yup.object({\r\n  name: yup.string().required('Заполните все поля'),\r\n  comment: yup.string().required('Заполните все поля'),\r\n});\r\n\r\nexport default function FormComments() {\r\n  return (\r\n    <div>\r\n      <h1>Ваш комментарий</h1>\r\n      <Formik\r\n        validationSchema={validationSchema}\r\n        initialValues={{\r\n          name: '',\r\n          comment: '',\r\n        }}\r\n        onSubmit={async (values, { resetForm }) => {\r\n          fetch('https://jordan.ashton.fashion/api/goods/30/comments', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values, null, 2),\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          })\r\n            .then(response => response.json())\r\n            .then(post => console.log(post))\r\n            .catch(error => console.log(error));\r\n          resetForm();\r\n        }}\r\n      >\r\n        {({ values, handleChange, handleSubmit }) => (\r\n          <Form onSubmit={handleSubmit} className='formCommentsWrapper'>\r\n            <TextField\r\n              onChange={handleChange}\r\n              name='name'\r\n              placeholder='Имя'\r\n              value={values.name}\r\n            />\r\n\r\n            <TextareaAutosize\r\n              aria-label='empty textarea'\r\n              onChange={handleChange}\r\n              name='comment'\r\n              placeholder='Комментарий'\r\n              value={values.comment}\r\n              style={{\r\n                outline: 'none',\r\n                border: '1px rgba(245, 0, 87, 0.5) solid',\r\n                padding: 10,\r\n                borderRadius: 4,\r\n                fontFamily: 'Lato',\r\n                '&::placeholder': {\r\n                  fontFamily: 'Lato',\r\n                },\r\n              }}\r\n            />\r\n\r\n            <Button type='submit' variant='outlined' color='secondary'>\r\n              отправить <ArrowForwardIosSharpIcon style={{ fontSize: 15 }} />\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}","import { useState, useEffect } from 'react';\r\nimport { Button } from '@material-ui/core';\r\n\r\nexport default function ListComments() {\r\n  const [comment, setComment] = useState([]);\r\n  const [page, setPage] = useState([1]);\r\n\r\n  useEffect(() => {\r\n    fetch(`https://jordan.ashton.fashion/api/goods/30/comments?page=${page}`)\r\n      .then(res => res.json())\r\n      .then(json => setComment(json));\r\n  }, [page]);\r\n\r\n  const loadPage = () => setPage(page + 1);\r\n\r\n  return (\r\n    <div className=\"CommentsWrapper\">\r\n      <h1>Комментарии</h1>\r\n\r\n      <pre> {JSON.stringify(comment.data)} </pre>\r\n      <ul>\r\n        {/* {JSON.stringify(comment.data).map(({ name, text, created_at, id }) => (\r\n          <li key={id}>\r\n            <h2>{name}</h2>\r\n            <p>{text}</p>\r\n            <p>{created_at}</p>\r\n          </li>\r\n        ))} */}\r\n      </ul>\r\n      <Button\r\n        onClick={loadPage}\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        style={{ margin: '60px auto 10px auto', display: 'block' }}\r\n      >\r\n        load more\r\n      </Button>\r\n    </div>\r\n  );\r\n}","import FormComment from './Сomponents/FormComment';\nimport ListComments from './Сomponents/ListComments';\n\nfunction App() {\n  return (\n    <main>\n      <FormComment />\n      <ListComments />\n    </main>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}